generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Academy {
  id           String         @id
  name         String
  location     String
  description  String?
  contactEmail String?
  contactPhone String?
  adminIds     String         @db.LongText
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?
  Event        Event[]
  Match        Match[]
  Player       Player[]
  TrainingPlan TrainingPlan[]
  User         User[]
}

model Attendance {
  id        String   @id
  playerId  String
  eventId   String?
  matchId   String?
  status    String
  date      DateTime
  createdAt DateTime @default(now())
  Event     Event?   @relation(fields: [eventId], references: [id])
  Match     Match?   @relation(fields: [matchId], references: [id])
  Player    Player   @relation(fields: [playerId], references: [id])

  @@index([eventId], map: "Attendance_eventId_fkey")
  @@index([matchId], map: "Attendance_matchId_fkey")
  @@index([playerId], map: "Attendance_playerId_fkey")
}

model Event {
  id          String       @id
  academyId   String
  title       String
  description String
  date        DateTime
  location    String
  type        String
  createdAt   DateTime     @default(now())
  Attendance  Attendance[]
  Academy     Academy      @relation(fields: [academyId], references: [id])

  @@index([academyId], map: "Event_academyId_fkey")
}

model Feedback {
  id        String   @id
  playerId  String
  coachId   String
  rating    Int
  notes     String
  date      DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [coachId], references: [id])
  Player    Player   @relation(fields: [playerId], references: [id])

  @@index([coachId], map: "Feedback_coachId_fkey")
  @@index([playerId], map: "Feedback_playerId_fkey")
}

model Match {
  id          String        @id
  academyId   String
  title       String
  date        DateTime
  location    String
  type        String
  createdAt   DateTime      @default(now())
  Attendance  Attendance[]
  Academy     Academy       @relation(fields: [academyId], references: [id])
  PlayerStats PlayerStats[]

  @@index([academyId], map: "Match_academyId_fkey")
}

model Notification {
  id        String   @id
  userId    String
  type      String
  title     String
  message   String
  relatedId String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Notification_userId_fkey")
}

model Player {
  id             String          @id
  userId         String          @unique
  fullName       String
  age            Int
  height         Float
  position       String
  highlightReels String          @db.LongText
  academyId      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  Attendance     Attendance[]
  Feedback       Feedback[]
  Academy        Academy         @relation(fields: [academyId], references: [id])
  PlayerStats    PlayerStats[]
  ScoutFavorite  ScoutFavorite[]
  User           User?

  @@index([academyId], map: "Player_academyId_fkey")
}

model PlayerStats {
  id            String   @id
  playerId      String
  matchId       String
  goals         Int      @default(0)
  assists       Int      @default(0)
  minutesPlayed Int      @default(0)
  date          DateTime
  createdAt     DateTime @default(now())
  Match         Match    @relation(fields: [matchId], references: [id])
  Player        Player   @relation(fields: [playerId], references: [id])

  @@index([matchId], map: "PlayerStats_matchId_fkey")
  @@index([playerId], map: "PlayerStats_playerId_fkey")
}

model ScoutFavorite {
  id        String   @id
  scoutId   String
  playerId  String
  createdAt DateTime @default(now())
  Player    Player   @relation(fields: [playerId], references: [id])
  User      User     @relation(fields: [scoutId], references: [id])

  @@index([playerId], map: "ScoutFavorite_playerId_fkey")
  @@index([scoutId], map: "ScoutFavorite_scoutId_fkey")
}

model TrainingPlan {
  id          String   @id
  coachId     String
  title       String
  description String
  drills      String   @db.LongText
  date        DateTime
  academyId   String
  createdAt   DateTime @default(now())
  Academy     Academy  @relation(fields: [academyId], references: [id])
  User        User     @relation(fields: [coachId], references: [id])

  @@index([academyId], map: "TrainingPlan_academyId_fkey")
  @@index([coachId], map: "TrainingPlan_coachId_fkey")
}

model User {
  id                String          @id
  role              String          @default("player")
  fullName          String
  email             String          @unique
  password          String?
  phone             String?
  createdAt         DateTime        @default(now())
  profilePhoto      String?
  playerId          String?         @unique
  academyId         String
  isEmailVerified   Boolean         @default(false)
  verificationToken String?
  Feedback          Feedback[]
  Notification      Notification[]
  ScoutFavorite     ScoutFavorite[]
  TrainingPlan      TrainingPlan[]
  Academy           Academy         @relation(fields: [academyId], references: [id])
  Player            Player?         @relation(fields: [playerId], references: [id])

  @@index([academyId], map: "User_academyId_fkey")
}
